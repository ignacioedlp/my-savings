import { useState } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';

function Saving({
  save = {
    id: null,
    category: null,
    amount: null,
    currency: null,
    concept: null,
  },
}) {
  const [newAmount, setNewAmount] = useState(0);
  const router = useRouter();

  const handleChangeAmount = (evt) => {
    const { target } = evt;
    const { value } = target;

    setNewAmount(value);
  };

  const handleFetch = async (amount) => {
    var myHeaders = new Headers();
    myHeaders.append('Content-Type', 'application/json');

    var raw = JSON.stringify({
      newAmount: amount,
    });

    var requestOptions = {
      method: 'PUT',
      headers: myHeaders,
      body: raw,
      redirect: 'follow',
    };

    const res = await fetch(
      `https://my-savings.vercel.app/api/saving/${save.id}`,
      requestOptions
    )
      .then((response) => response.text())
      .then((result) => console.log(result))
      .catch((error) => console.log('error', error));

    router.push('/');
  };

  const handleAddAmount = () => {
    handleFetch(parseFloat(save.amount) + parseInt(newAmount));
  };

  const handleRestAmount = () => {
    handleFetch(parseFloat(save.amount) - parseInt(newAmount));
  };

  const handleDelete = async () => {
    var requestOptions = {
      method: 'DELETE',
      redirect: 'follow',
    };

    const res = await fetch(
      `https://my-savings.vercel.app/api/saving/${save.id}`,
      requestOptions
    )
      .then((response) => response.text())
      .then((result) => console.log(result))
      .catch((error) => console.log('error', error));

    router.push('/');
  };

  return (
    <>
      <Head>
        <title>My savings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" mx-auto px-4 sm:px-6 lg:px-8 pt-4 bg-gray-900 h-screen">
        <h1 className="text-xl font-semibold text-white">Edit saving</h1>
        <div className=" text-white flex flex-col mt-3 justify-center gap-5">
          <div className="flex flex-row justify-around">
            <div className="flex flex-col items-center">
              <h4 className="text-xl font-semibold">Category</h4>
              <p className="text-md">{save.category || 'category'}</p>
            </div>
            <div className="flex flex-col items-center">
              <h4 className="text-xl font-semibold">Amount</h4>
              <p className="text-md">{save.amount || 'amount'}</p>
            </div>
          </div>
          <div className="flex flex-row justify-around">
            <div className="flex flex-col items-center">
              <h4 className="text-xl font-semibold">Currency</h4>
              <p className="text-md">{save.currency || 'currency'}</p>
            </div>
            <div className="flex flex-col items-center">
              <h4 className="text-xl font-semibold">Concept</h4>
              <p className="text-md">{save.concept || 'concept'}</p>
            </div>
          </div>
        </div>

        <div className="w-4/5 flex-col justify-center items-center mx-auto mt-5">
          <label forHtml="newAmount" className="leading-7 text-md text-white">
            Amount
          </label>
          <input
            onChange={handleChangeAmount}
            type="number"
            id="newAmount"
            value={newAmount}
            className="w-full bg-white bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-white focus:ring-2 focus:ring-indigo-200 text-base outline-none text-black py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
          />
        </div>
        {newAmount != 0 && newAmount != '' && (
          <div className="flex flex-row w-4/5 mx-auto">
            <button
              className="flex mx-auto mt-6 text-white bg-green-500 border-0 py-2 px-5 focus:outline-none hover:bg-green-600 rounded"
              onClick={handleAddAmount}
            >
              Add saving
            </button>
            <button
              className="flex mx-auto mt-6 text-white bg-rose-500 border-0 py-2 px-5 focus:outline-none hover:bg-rose-600 rounded"
              onClick={handleRestAmount}
            >
              Rest saving
            </button>
          </div>
        )}
        <button
          className="flex mx-auto mt-6 text-white bg-rose-500 border-0 py-2 px-5 focus:outline-none hover:bg-rose-600 rounded"
          onClick={handleDelete}
        >
          Delete saving
        </button>
      </main>
    </>
  );
}

export default Saving;

export async function getStaticProps({ params }) {
  // params.id will be like ['a', 'b', 'c']

  const save = await fetch(
    'https://my-savings.vercel.app/api/saving/' + params.saving
  ).then((res) => res.json());

  return {
    props: {
      save: save || {
        category: null,
        amount: null,
        currency: null,
        concept: null,
      },
    },
  };
}

export async function getStaticPaths() {
  return {
    paths: [
      // Object variant:
      { params: { saving: 'saving' } },
    ],
    fallback: true,
  };
}
