import Head from 'next/head'
import CreateSaving from '../components/CreateSaving.jsx'
import Table from '../components/Table.jsx'
import Total from '../components/Total.jsx'
import useSWR from 'swr'
import ChartLine from '../components/Chart.tsx'

export default function Home({ totalInUsdCCL, optionsCurrency, totalInArs }) {
  const contadoCLL = useSWR(
    'https://api-dolar-argentina.herokuapp.com/api/contadoliqui',
  )

  const dolarBlue = useSWR(
    'https://api-dolar-argentina.herokuapp.com/api/dolarblue',
  )

  const criptoList = useSWR(
    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd',
  )

  const savings = useSWR('api/saving')

  if (contadoCLL.error || dolarBlue.error || savings.error) {
    return <div>failed to load</div>
  }
  if (!contadoCLL.data || !dolarBlue.data || !savings.data) {
    return <div>loading...</div>
  }

  const handleCrypto = (data) => {
    let totalInCrypto = 0

    for (const element of data) {
      if (element.category == 'Cripto') {
        let coin = criptoList.data.find((c) => c.id == element.currency)
        if (coin != undefined && coin != null) {
          totalInCrypto += coin.current_price * element.amount
        }
      }
    }
    return totalInCrypto
  }

  return (
    <>
      <Head>
        <title>My savings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" mx-auto px-4 sm:px-6 lg:px-8 pt-4 bg-gray-900">
        <div className=" text-white">
          <h1 className="text-xl font-semibold">My savings</h1>
        </div>
        <div className="flex flex-col md:flex-row justify-center w-full items-center">
          <Total title={'USD CCL'} amount={contadoCLL.data.venta} />
          <CreateSaving optionsCurrency={optionsCurrency} />
          <Total title={'USD Blue'} amount={parseFloat(dolarBlue.data.venta)} />
        </div>
        <div className="flex flex-col md:flex-row justify-center w-full items-center">
          <Total
            title={'Total ARS'}
            amount={(
              totalInUsdCCL.totalInUsd * parseInt(contadoCLL.data.venta) +
              handleCrypto(savings.data) +
              totalInArs
            ).toFixed(2)}
          />
          <Total
            title={'Total USD'}
            amount={
              parseInt(totalInUsdCCL.totalInUsd) +
              parseInt(handleCrypto(savings.data))
            }
          />
          <Total
            title={'Total USD fiat'}
            amount={totalInUsdCCL.totalInUsd}
            extra={(
              totalInUsdCCL.totalInUsd * parseInt(contadoCLL.data.venta)
            ).toFixed(2)}
          />
          <Total
            title={'Total Crypto'}
            amount={handleCrypto(savings.data)}
            extra={(
              handleCrypto(savings.data) * parseInt(dolarBlue.data.venta)
            ).toFixed(2)}
          />
        </div>
        <div className="mt-4 shadow-md">
          <Table data={savings.data} />
        </div>
      </main>
    </>
  )
}

export const getServerSideProps = async () => {
  const response = await fetch('https://my-savings.vercel.app/api/saving')
  const criptoResponse = await fetch(
    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd',
    {
      method: 'GET',
      redirect: 'follow',
    },
  )

  const criptoList = await criptoResponse.json()

  var requestOptions = {
    method: 'GET',
    redirect: 'follow',
  }

  const dolarCCL = await fetch(
    'https://api-dolar-argentina.herokuapp.com/api/contadoliqui',
    requestOptions,
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error))

  const dolarBlue = await fetch(
    'https://api-dolar-argentina.herokuapp.com/api/dolarblue',
    requestOptions,
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error))

  //Creo un array con objetos de {id, name, amount}
  let optionsCurrency = criptoList.map((coin) => {
    return { value: coin.id, label: coin.name, name: 'newCurrency' }
  })

  let totalInUsd = 0
  let totalInArs = 0
  let totalInCrypto = 0

  if (response.statusCode === 500)
    return {
      props: {
        data,
        totalInUsdCCL: {
          totalInUsd: totalInUsd,
          totalInArsCCL: totalInUsd * parseFloat(dolarCCL.venta),
        },
        optionsCurrency: optionsCurrency,
        totalInCrypto: {
          totalInCrypto: totalInCrypto,
          totalInArsCripto: totalInCrypto * parseFloat(dolarBlue.venta),
        },
      },
    }

  const data = await response.json()

  for (const element of data) {
    if (element.currency == 'usd') {
      totalInUsd = totalInUsd + element.amount
    }
  }

  for (const element of data) {
    if (element.currency == 'ars') {
      totalInArs = totalInArs + element.amount
    }
  }

  for (const element of data) {
    if (element.category == 'Cripto') {
      let coin = criptoList.find((c) => c.id == element.currency)
      if (coin != undefined && coin != null) {
        totalInCrypto += coin.current_price * element.amount
      }
    }
  }

  return {
    props: {
      totalInUsdCCL: {
        totalInUsd: totalInUsd.toFixed(2),
        totalInArsCCL: totalInUsd * parseFloat(dolarCCL.venta),
      },
      optionsCurrency: optionsCurrency,
      totalInArs: totalInArs,
      totalInCrypto: {
        totalInCrypto: totalInCrypto.toFixed(2),
        totalInArsCripto: totalInCrypto * parseFloat(dolarBlue.venta),
      },
    },
  }
}
