import Head from 'next/head';
import CreateSaving from '../components/CreateSaving.jsx';
import Table from '../components/Table.jsx';
import Total from '../components/Total.jsx';
import ChartLine from '../components/Chart.jsx';

export default function Home({
  savings,
  savingsList,
  dolarBlue,
  dolarCCL,
  optionsCurrency,
  pesos,
  cripto,
  dolares,
}) {
  return (
    <>
      <Head>
        <title>My savings</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" mx-auto px-4 sm:px-6 lg:px-8 pt-4 bg-gray-900">
        <div className=" text-white">
          <h1 className="text-xl font-semibold">My savings</h1>
        </div>
        <div className="flex mt-9 flex-col md:flex-row justify-center w-full items-center">
          <div className="block md:hidden">
            <ChartLine
              cripto={cripto.total}
              dolares={dolares.total}
              pesos={pesos.total / dolarBlue.venta}
            />
          </div>
          s
          <Total title={'USD CCL'} amount={dolarCCL.venta} />
          <div className="hidden md:block">
            <ChartLine
              cripto={cripto.total}
              dolares={dolares.total}
              pesos={pesos.total / dolarBlue.venta}
            />
          </div>
          <Total title={'USD Blue'} amount={dolarBlue.venta} />
        </div>
        {
          <div
            className={`grid grid-cols-1 md:grid-cols-3  justify-center w-full items-center`}
          >
            <Total title={pesos.name} amount={pesos.total.toFixed(2)} />
            <Total
              title={dolares.name}
              amount={dolares.total.toFixed(2)}
              extra={dolares.totalInArs}
            />
            {savings.map((saving) => (
              <Total
                key={saving.id}
                title={saving.name}
                amount={saving.total.toFixed(2)}
                extra={saving.totalInArs}
              />
            ))}
          </div>
        }

        <div className="flex flex-col md:flex-row justify-center">
          <CreateSaving optionsCurrency={optionsCurrency} />
        </div>
        <div className="mt-4 shadow-md">
          <Table data={savingsList} />
        </div>
      </main>
    </>
  );
}

export const getStaticProps = async () => {
  let requestOptions = {
    method: 'GET',
    redirect: 'follow',
  };

  const savings = [];

  const criptoResponse = await fetch(
    'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd',
    requestOptions
  );

  const criptoList = await criptoResponse.json();

  const onTop = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=OnTop',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const payoneer = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Payoneer',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const criptos = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Cripto&list=true',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const cuentaDni = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Cuenta DNI',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const usdFisico = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=USD fisico',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const lemon = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Lemon',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const fiat = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Fiat',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const mercadoLibre = await fetch(
    'https://my-savings.vercel.app/api/saving?categoria=Mercado libre',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const savingsList = await fetch('https://my-savings.vercel.app/api/saving', {
    requestOptions,
  })
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const dolarCCL = await fetch(
    'https://api-dolar-argentina.herokuapp.com/api/contadoliqui',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  const dolarBlue = await fetch(
    'https://api-dolar-argentina.herokuapp.com/api/dolarblue',
    requestOptions
  )
    .then((res) => res.json())
    .catch((error) => console.log('error', error));

  //Creo un array con objetos de {id, name, amount}
  let optionsCurrency = criptoList.map((coin) => {
    return { value: coin.id, label: coin.name, name: 'newCurrency' };
  });

  let totalInCrypto = 0;

  for (const element of criptos) {
    let coin = criptoList.find((c) => c.id == element.currency);
    if (coin != undefined && coin != null) {
      totalInCrypto += coin.current_price * element.amount;
    }
  }

  savings.push({
    name: 'Cripto',
    total: totalInCrypto,
    totalInArs: totalInCrypto * parseFloat(dolarBlue.venta),
  });
  savings.push({
    name: 'OnTop',
    total: onTop,
    totalInArs: onTop * parseFloat(dolarCCL.venta),
  });
  savings.push({
    name: 'Payoneer',
    total: payoneer,
    totalInArs: payoneer * parseFloat(dolarCCL.venta),
  });
  savings.push({ name: 'Lemon', total: lemon });
  savings.push({ name: 'Mercado Libre', total: mercadoLibre });
  savings.push({
    name: 'Fiat',
    total: fiat,
    totalInArs: fiat * parseFloat(dolarBlue.venta),
  });
  savings.push({
    name: 'Fisico USD',
    total: usdFisico,
    totalInArs: usdFisico * parseFloat(dolarBlue.venta),
  });
  savings.push({ name: 'Cuenta DNI', total: cuentaDni });
  const pesos = { name: 'Total ARS', total: cuentaDni + lemon + mercadoLibre };
  const dolares = {
    name: 'Total USD',
    total: payoneer + usdFisico + fiat + onTop + totalInCrypto,
    totalInArs:
      totalInCrypto * parseFloat(dolarBlue.venta) +
      usdFisico * parseFloat(dolarBlue.venta) +
      fiat * parseFloat(dolarBlue.venta) +
      payoneer * parseFloat(dolarCCL.venta) +
      totalInCrypto * parseFloat(dolarBlue.venta),
  };

  return {
    props: {
      savings: savings,
      savingsList: savingsList,
      dolarBlue: dolarBlue,
      dolarCCL: dolarCCL,
      optionsCurrency: optionsCurrency,
      pesos: pesos,
      dolares: dolares,
      cripto: { name: 'Total Cripto', total: totalInCrypto },
    },
  };
};
